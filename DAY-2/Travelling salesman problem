import itertools

# Function to calculate total distance of a path
def calculate_cost(graph, path):
    cost = 0
    for i in range(len(path) - 1):
        cost += graph[path[i]][path[i + 1]]
    cost += graph[path[-1]][path[0]]  # Return to starting point
    return cost

# TSP brute-force function
def tsp_brute_force(graph):
    n = len(graph)
    cities = list(range(n))
    min_cost = float('inf')
    best_path = []

    for perm in itertools.permutations(cities[1:]):  # Fix the first city to reduce duplicates
        path = [0] + list(perm)
        cost = calculate_cost(graph, path)
        if cost < min_cost:
            min_cost = cost
            best_path = path

    return best_path, min_cost

# Example graph (distance matrix)
graph = [
    [0, 10, 15, 20],
    [10, 0, 35, 25],
    [15, 35, 0, 30],
    [20, 25, 30, 0]
]

# Solve TSP
path, cost = tsp_brute_force(graph)

# Output result
print("Best Path:", path)
print("Minimum Cost:", cost)
